//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("City", "CreditCardPerson", "CreditCard", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(City.CreditCard), "Person", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(City.Person))]
[assembly: EdmRelationshipAttribute("City", "CreditCardTransactions", "Transaction", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(City.Transaction), "CreditCard", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(City.CreditCard))]
[assembly: EdmRelationshipAttribute("City", "PoiTransaction", "Transaction", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(City.Transaction), "Poi", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(City.Poi))]
[assembly: EdmRelationshipAttribute("City", "PoiPoiType", "Poi", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(City.Poi), "PoiType", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(City.PoiType))]
[assembly: EdmRelationshipAttribute("City", "CreditCardCurrency", "CreditCard", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(City.CreditCard), "Currency", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(City.Currency))]
[assembly: EdmRelationshipAttribute("City", "PersonDemand", "Demand", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(City.Demand), "Person", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(City.Person))]
[assembly: EdmRelationshipAttribute("City", "DemandPoiType", "Demand", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(City.Demand), "PoiType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(City.PoiType))]
[assembly: EdmRelationshipAttribute("City", "CreditCardBank", "CreditCard", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(City.CreditCard), "Bank", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(City.Bank))]
[assembly: EdmRelationshipAttribute("City", "AddressPerson", "Address", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(City.Address), "Person", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(City.Person))]
[assembly: EdmRelationshipAttribute("City", "DistrictAddress", "District", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(City.District), "Address", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(City.Address))]
[assembly: EdmRelationshipAttribute("City", "ConfigurationDistrict", "Configuration", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(City.Configuration), "District", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(City.District))]
[assembly: EdmRelationshipAttribute("City", "TransactionDemand", "Transaction", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(City.Transaction), "Demand", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(City.Demand))]
[assembly: EdmRelationshipAttribute("City", "ConfigurationPoiType", "Configuration", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(City.Configuration), "PoiType", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(City.PoiType))]
[assembly: EdmRelationshipAttribute("City", "DistrictMapPoint", "District", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(City.District), "MapPoint", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(City.MapPoint))]
[assembly: EdmRelationshipAttribute("City", "PersonPersonTemplate", "Person", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(City.Person), "PersonTemplate", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(City.PersonTemplate))]
[assembly: EdmRelationshipAttribute("City", "AddressMapPoint", "Address", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(City.Address), "MapPoint", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(City.MapPoint))]
[assembly: EdmRelationshipAttribute("City", "PoiMapPoint", "Poi", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(City.Poi), "MapPoint", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(City.MapPoint))]
[assembly: EdmRelationshipAttribute("City", "ConfigurationPois", "Configuration", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(City.Configuration), "Poi", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(City.Poi))]
[assembly: EdmRelationshipAttribute("City", "SelectionMethodConfiguration", "SelectionMethod", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(City.SelectionMethod), "Configuration", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(City.Configuration))]
[assembly: EdmRelationshipAttribute("City", "ConfigurationCircleArea", "Configuration", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(City.Configuration), "CircleArea", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(City.CircleArea))]

#endregion

namespace City
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class CityContainer : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new CityContainer object using the connection string found in the 'CityContainer' section of the application configuration file.
        /// </summary>
        public CityContainer() : base("name=CityContainer", "CityContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new CityContainer object.
        /// </summary>
        public CityContainer(string connectionString) : base(connectionString, "CityContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new CityContainer object.
        /// </summary>
        public CityContainer(EntityConnection connection) : base(connection, "CityContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<District> Districts
        {
            get
            {
                if ((_Districts == null))
                {
                    _Districts = base.CreateObjectSet<District>("Districts");
                }
                return _Districts;
            }
        }
        private ObjectSet<District> _Districts;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Person> People
        {
            get
            {
                if ((_People == null))
                {
                    _People = base.CreateObjectSet<Person>("People");
                }
                return _People;
            }
        }
        private ObjectSet<Person> _People;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CreditCard> CreditCards
        {
            get
            {
                if ((_CreditCards == null))
                {
                    _CreditCards = base.CreateObjectSet<CreditCard>("CreditCards");
                }
                return _CreditCards;
            }
        }
        private ObjectSet<CreditCard> _CreditCards;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<MapPoint> MapPoints
        {
            get
            {
                if ((_MapPoints == null))
                {
                    _MapPoints = base.CreateObjectSet<MapPoint>("MapPoints");
                }
                return _MapPoints;
            }
        }
        private ObjectSet<MapPoint> _MapPoints;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Bank> Banks
        {
            get
            {
                if ((_Banks == null))
                {
                    _Banks = base.CreateObjectSet<Bank>("Banks");
                }
                return _Banks;
            }
        }
        private ObjectSet<Bank> _Banks;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Currency> Currencies
        {
            get
            {
                if ((_Currencies == null))
                {
                    _Currencies = base.CreateObjectSet<Currency>("Currencies");
                }
                return _Currencies;
            }
        }
        private ObjectSet<Currency> _Currencies;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PoiType> PoiTypes
        {
            get
            {
                if ((_PoiTypes == null))
                {
                    _PoiTypes = base.CreateObjectSet<PoiType>("PoiTypes");
                }
                return _PoiTypes;
            }
        }
        private ObjectSet<PoiType> _PoiTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Transaction> Transactions
        {
            get
            {
                if ((_Transactions == null))
                {
                    _Transactions = base.CreateObjectSet<Transaction>("Transactions");
                }
                return _Transactions;
            }
        }
        private ObjectSet<Transaction> _Transactions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Demand> Demands
        {
            get
            {
                if ((_Demands == null))
                {
                    _Demands = base.CreateObjectSet<Demand>("Demands");
                }
                return _Demands;
            }
        }
        private ObjectSet<Demand> _Demands;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Configuration> Configurations
        {
            get
            {
                if ((_Configurations == null))
                {
                    _Configurations = base.CreateObjectSet<Configuration>("Configurations");
                }
                return _Configurations;
            }
        }
        private ObjectSet<Configuration> _Configurations;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PersonTemplate> PersonTemplates
        {
            get
            {
                if ((_PersonTemplates == null))
                {
                    _PersonTemplates = base.CreateObjectSet<PersonTemplate>("PersonTemplates");
                }
                return _PersonTemplates;
            }
        }
        private ObjectSet<PersonTemplate> _PersonTemplates;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Poi> Pois
        {
            get
            {
                if ((_Pois == null))
                {
                    _Pois = base.CreateObjectSet<Poi>("Pois");
                }
                return _Pois;
            }
        }
        private ObjectSet<Poi> _Pois;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Address> Addresses
        {
            get
            {
                if ((_Addresses == null))
                {
                    _Addresses = base.CreateObjectSet<Address>("Addresses");
                }
                return _Addresses;
            }
        }
        private ObjectSet<Address> _Addresses;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SelectionMethod> SelectionMethods
        {
            get
            {
                if ((_SelectionMethods == null))
                {
                    _SelectionMethods = base.CreateObjectSet<SelectionMethod>("SelectionMethods");
                }
                return _SelectionMethods;
            }
        }
        private ObjectSet<SelectionMethod> _SelectionMethods;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CircleArea> CircleAreas
        {
            get
            {
                if ((_CircleAreas == null))
                {
                    _CircleAreas = base.CreateObjectSet<CircleArea>("CircleAreas");
                }
                return _CircleAreas;
            }
        }
        private ObjectSet<CircleArea> _CircleAreas;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Districts EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDistricts(District district)
        {
            base.AddObject("Districts", district);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the People EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPeople(Person person)
        {
            base.AddObject("People", person);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CreditCards EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCreditCards(CreditCard creditCard)
        {
            base.AddObject("CreditCards", creditCard);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the MapPoints EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMapPoints(MapPoint mapPoint)
        {
            base.AddObject("MapPoints", mapPoint);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Banks EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToBanks(Bank bank)
        {
            base.AddObject("Banks", bank);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Currencies EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCurrencies(Currency currency)
        {
            base.AddObject("Currencies", currency);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the PoiTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPoiTypes(PoiType poiType)
        {
            base.AddObject("PoiTypes", poiType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Transactions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTransactions(Transaction transaction)
        {
            base.AddObject("Transactions", transaction);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Demands EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDemands(Demand demand)
        {
            base.AddObject("Demands", demand);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Configurations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToConfigurations(Configuration configuration)
        {
            base.AddObject("Configurations", configuration);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the PersonTemplates EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPersonTemplates(PersonTemplate personTemplate)
        {
            base.AddObject("PersonTemplates", personTemplate);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Pois EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPois(Poi poi)
        {
            base.AddObject("Pois", poi);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Addresses EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAddresses(Address address)
        {
            base.AddObject("Addresses", address);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SelectionMethods EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSelectionMethods(SelectionMethod selectionMethod)
        {
            base.AddObject("SelectionMethods", selectionMethod);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CircleAreas EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCircleAreas(CircleArea circleArea)
        {
            base.AddObject("CircleAreas", circleArea);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="City", Name="Address")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Address : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Address object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        public static Address CreateAddress(global::System.Int32 id)
        {
            Address address = new Address();
            address.Id = id;
            return address;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AddressLine
        {
            get
            {
                return _AddressLine;
            }
            set
            {
                OnAddressLineChanging(value);
                ReportPropertyChanging("AddressLine");
                _AddressLine = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AddressLine");
                OnAddressLineChanged();
            }
        }
        private global::System.String _AddressLine;
        partial void OnAddressLineChanging(global::System.String value);
        partial void OnAddressLineChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("City", "AddressPerson", "Person")]
        public EntityCollection<Person> Residents
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Person>("City.AddressPerson", "Person");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Person>("City.AddressPerson", "Person", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("City", "DistrictAddress", "District")]
        public District District
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<District>("City.DistrictAddress", "District").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<District>("City.DistrictAddress", "District").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<District> DistrictReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<District>("City.DistrictAddress", "District");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<District>("City.DistrictAddress", "District", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("City", "AddressMapPoint", "MapPoint")]
        public MapPoint MapPoint
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MapPoint>("City.AddressMapPoint", "MapPoint").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MapPoint>("City.AddressMapPoint", "MapPoint").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<MapPoint> MapPointReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MapPoint>("City.AddressMapPoint", "MapPoint");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<MapPoint>("City.AddressMapPoint", "MapPoint", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="City", Name="Bank")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Bank : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Bank object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Bank CreateBank(global::System.Int32 id, global::System.String name)
        {
            Bank bank = new Bank();
            bank.Id = id;
            bank.Name = name;
            return bank;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="City", Name="CircleArea")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CircleArea : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CircleArea object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="lat">Initial value of the Lat property.</param>
        /// <param name="lng">Initial value of the Lng property.</param>
        /// <param name="range">Initial value of the Range property.</param>
        public static CircleArea CreateCircleArea(global::System.Int32 id, global::System.Double lat, global::System.Double lng, global::System.Double range)
        {
            CircleArea circleArea = new CircleArea();
            circleArea.Id = id;
            circleArea.Lat = lat;
            circleArea.Lng = lng;
            circleArea.Range = range;
            return circleArea;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Lat
        {
            get
            {
                return _Lat;
            }
            set
            {
                OnLatChanging(value);
                ReportPropertyChanging("Lat");
                _Lat = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Lat");
                OnLatChanged();
            }
        }
        private global::System.Double _Lat;
        partial void OnLatChanging(global::System.Double value);
        partial void OnLatChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Lng
        {
            get
            {
                return _Lng;
            }
            set
            {
                OnLngChanging(value);
                ReportPropertyChanging("Lng");
                _Lng = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Lng");
                OnLngChanged();
            }
        }
        private global::System.Double _Lng;
        partial void OnLngChanging(global::System.Double value);
        partial void OnLngChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Range
        {
            get
            {
                return _Range;
            }
            set
            {
                OnRangeChanging(value);
                ReportPropertyChanging("Range");
                _Range = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Range");
                OnRangeChanged();
            }
        }
        private global::System.Double _Range;
        partial void OnRangeChanging(global::System.Double value);
        partial void OnRangeChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("City", "ConfigurationCircleArea", "Configuration")]
        public Configuration Configuration
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Configuration>("City.ConfigurationCircleArea", "Configuration").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Configuration>("City.ConfigurationCircleArea", "Configuration").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Configuration> ConfigurationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Configuration>("City.ConfigurationCircleArea", "Configuration");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Configuration>("City.ConfigurationCircleArea", "Configuration", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="City", Name="Configuration")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Configuration : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Configuration object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="simulationStartDate">Initial value of the SimulationStartDate property.</param>
        /// <param name="simulationEndDate">Initial value of the SimulationEndDate property.</param>
        /// <param name="personDemandsPerDay">Initial value of the PersonDemandsPerDay property.</param>
        /// <param name="creditCardBalanceMin">Initial value of the CreditCardBalanceMin property.</param>
        /// <param name="creditCardBalanceMax">Initial value of the CreditCardBalanceMax property.</param>
        /// <param name="creditCardLimitMin">Initial value of the CreditCardLimitMin property.</param>
        /// <param name="creditCardLimitMax">Initial value of the CreditCardLimitMax property.</param>
        /// <param name="transactionValueMin">Initial value of the TransactionValueMin property.</param>
        /// <param name="transactionValueMax">Initial value of the TransactionValueMax property.</param>
        public static Configuration CreateConfiguration(global::System.Int32 id, global::System.String name, global::System.DateTime simulationStartDate, global::System.DateTime simulationEndDate, global::System.Double personDemandsPerDay, global::System.Int32 creditCardBalanceMin, global::System.Int32 creditCardBalanceMax, global::System.Int32 creditCardLimitMin, global::System.Int32 creditCardLimitMax, global::System.Int32 transactionValueMin, global::System.Int32 transactionValueMax)
        {
            Configuration configuration = new Configuration();
            configuration.Id = id;
            configuration.Name = name;
            configuration.SimulationStartDate = simulationStartDate;
            configuration.SimulationEndDate = simulationEndDate;
            configuration.PersonDemandsPerDay = personDemandsPerDay;
            configuration.CreditCardBalanceMin = creditCardBalanceMin;
            configuration.CreditCardBalanceMax = creditCardBalanceMax;
            configuration.CreditCardLimitMin = creditCardLimitMin;
            configuration.CreditCardLimitMax = creditCardLimitMax;
            configuration.TransactionValueMin = transactionValueMin;
            configuration.TransactionValueMax = transactionValueMax;
            return configuration;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime SimulationStartDate
        {
            get
            {
                return _SimulationStartDate;
            }
            set
            {
                OnSimulationStartDateChanging(value);
                ReportPropertyChanging("SimulationStartDate");
                _SimulationStartDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SimulationStartDate");
                OnSimulationStartDateChanged();
            }
        }
        private global::System.DateTime _SimulationStartDate;
        partial void OnSimulationStartDateChanging(global::System.DateTime value);
        partial void OnSimulationStartDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime SimulationEndDate
        {
            get
            {
                return _SimulationEndDate;
            }
            set
            {
                OnSimulationEndDateChanging(value);
                ReportPropertyChanging("SimulationEndDate");
                _SimulationEndDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SimulationEndDate");
                OnSimulationEndDateChanged();
            }
        }
        private global::System.DateTime _SimulationEndDate;
        partial void OnSimulationEndDateChanging(global::System.DateTime value);
        partial void OnSimulationEndDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double PersonDemandsPerDay
        {
            get
            {
                return _PersonDemandsPerDay;
            }
            set
            {
                OnPersonDemandsPerDayChanging(value);
                ReportPropertyChanging("PersonDemandsPerDay");
                _PersonDemandsPerDay = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PersonDemandsPerDay");
                OnPersonDemandsPerDayChanged();
            }
        }
        private global::System.Double _PersonDemandsPerDay;
        partial void OnPersonDemandsPerDayChanging(global::System.Double value);
        partial void OnPersonDemandsPerDayChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CreditCardBalanceMin
        {
            get
            {
                return _CreditCardBalanceMin;
            }
            set
            {
                OnCreditCardBalanceMinChanging(value);
                ReportPropertyChanging("CreditCardBalanceMin");
                _CreditCardBalanceMin = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreditCardBalanceMin");
                OnCreditCardBalanceMinChanged();
            }
        }
        private global::System.Int32 _CreditCardBalanceMin;
        partial void OnCreditCardBalanceMinChanging(global::System.Int32 value);
        partial void OnCreditCardBalanceMinChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CreditCardBalanceMax
        {
            get
            {
                return _CreditCardBalanceMax;
            }
            set
            {
                OnCreditCardBalanceMaxChanging(value);
                ReportPropertyChanging("CreditCardBalanceMax");
                _CreditCardBalanceMax = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreditCardBalanceMax");
                OnCreditCardBalanceMaxChanged();
            }
        }
        private global::System.Int32 _CreditCardBalanceMax;
        partial void OnCreditCardBalanceMaxChanging(global::System.Int32 value);
        partial void OnCreditCardBalanceMaxChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CreditCardLimitMin
        {
            get
            {
                return _CreditCardLimitMin;
            }
            set
            {
                OnCreditCardLimitMinChanging(value);
                ReportPropertyChanging("CreditCardLimitMin");
                _CreditCardLimitMin = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreditCardLimitMin");
                OnCreditCardLimitMinChanged();
            }
        }
        private global::System.Int32 _CreditCardLimitMin;
        partial void OnCreditCardLimitMinChanging(global::System.Int32 value);
        partial void OnCreditCardLimitMinChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CreditCardLimitMax
        {
            get
            {
                return _CreditCardLimitMax;
            }
            set
            {
                OnCreditCardLimitMaxChanging(value);
                ReportPropertyChanging("CreditCardLimitMax");
                _CreditCardLimitMax = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreditCardLimitMax");
                OnCreditCardLimitMaxChanged();
            }
        }
        private global::System.Int32 _CreditCardLimitMax;
        partial void OnCreditCardLimitMaxChanging(global::System.Int32 value);
        partial void OnCreditCardLimitMaxChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TransactionValueMin
        {
            get
            {
                return _TransactionValueMin;
            }
            set
            {
                OnTransactionValueMinChanging(value);
                ReportPropertyChanging("TransactionValueMin");
                _TransactionValueMin = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TransactionValueMin");
                OnTransactionValueMinChanged();
            }
        }
        private global::System.Int32 _TransactionValueMin;
        partial void OnTransactionValueMinChanging(global::System.Int32 value);
        partial void OnTransactionValueMinChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TransactionValueMax
        {
            get
            {
                return _TransactionValueMax;
            }
            set
            {
                OnTransactionValueMaxChanging(value);
                ReportPropertyChanging("TransactionValueMax");
                _TransactionValueMax = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TransactionValueMax");
                OnTransactionValueMaxChanged();
            }
        }
        private global::System.Int32 _TransactionValueMax;
        partial void OnTransactionValueMaxChanging(global::System.Int32 value);
        partial void OnTransactionValueMaxChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("City", "ConfigurationDistrict", "District")]
        public EntityCollection<District> Districts
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<District>("City.ConfigurationDistrict", "District");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<District>("City.ConfigurationDistrict", "District", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("City", "ConfigurationPoiType", "PoiType")]
        public EntityCollection<PoiType> PoiTypes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PoiType>("City.ConfigurationPoiType", "PoiType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PoiType>("City.ConfigurationPoiType", "PoiType", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("City", "ConfigurationPois", "Poi")]
        public EntityCollection<Poi> Pois
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Poi>("City.ConfigurationPois", "Poi");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Poi>("City.ConfigurationPois", "Poi", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("City", "SelectionMethodConfiguration", "SelectionMethod")]
        public SelectionMethod SelectionMethod
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SelectionMethod>("City.SelectionMethodConfiguration", "SelectionMethod").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SelectionMethod>("City.SelectionMethodConfiguration", "SelectionMethod").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<SelectionMethod> SelectionMethodReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SelectionMethod>("City.SelectionMethodConfiguration", "SelectionMethod");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<SelectionMethod>("City.SelectionMethodConfiguration", "SelectionMethod", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("City", "ConfigurationCircleArea", "CircleArea")]
        public EntityCollection<CircleArea> CircleAreas
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CircleArea>("City.ConfigurationCircleArea", "CircleArea");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CircleArea>("City.ConfigurationCircleArea", "CircleArea", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="City", Name="CreditCard")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CreditCard : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CreditCard object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="balance">Initial value of the Balance property.</param>
        /// <param name="limit">Initial value of the Limit property.</param>
        /// <param name="number">Initial value of the Number property.</param>
        public static CreditCard CreateCreditCard(global::System.Int32 id, global::System.Double balance, global::System.Double limit, global::System.String number)
        {
            CreditCard creditCard = new CreditCard();
            creditCard.Id = id;
            creditCard.Balance = balance;
            creditCard.Limit = limit;
            creditCard.Number = number;
            return creditCard;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Balance
        {
            get
            {
                return _Balance;
            }
            set
            {
                OnBalanceChanging(value);
                ReportPropertyChanging("Balance");
                _Balance = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Balance");
                OnBalanceChanged();
            }
        }
        private global::System.Double _Balance;
        partial void OnBalanceChanging(global::System.Double value);
        partial void OnBalanceChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Limit
        {
            get
            {
                return _Limit;
            }
            set
            {
                OnLimitChanging(value);
                ReportPropertyChanging("Limit");
                _Limit = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Limit");
                OnLimitChanged();
            }
        }
        private global::System.Double _Limit;
        partial void OnLimitChanging(global::System.Double value);
        partial void OnLimitChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Number
        {
            get
            {
                return _Number;
            }
            set
            {
                OnNumberChanging(value);
                ReportPropertyChanging("Number");
                _Number = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Number");
                OnNumberChanged();
            }
        }
        private global::System.String _Number;
        partial void OnNumberChanging(global::System.String value);
        partial void OnNumberChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("City", "CreditCardPerson", "Person")]
        public Person Owner
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Person>("City.CreditCardPerson", "Person").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Person>("City.CreditCardPerson", "Person").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Person> OwnerReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Person>("City.CreditCardPerson", "Person");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Person>("City.CreditCardPerson", "Person", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("City", "CreditCardTransactions", "Transaction")]
        public EntityCollection<Transaction> Transactions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Transaction>("City.CreditCardTransactions", "Transaction");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Transaction>("City.CreditCardTransactions", "Transaction", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("City", "CreditCardCurrency", "Currency")]
        public Currency Currency
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("City.CreditCardCurrency", "Currency").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("City.CreditCardCurrency", "Currency").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Currency> CurrencyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("City.CreditCardCurrency", "Currency");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Currency>("City.CreditCardCurrency", "Currency", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("City", "CreditCardBank", "Bank")]
        public Bank Bank
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Bank>("City.CreditCardBank", "Bank").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Bank>("City.CreditCardBank", "Bank").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Bank> BankReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Bank>("City.CreditCardBank", "Bank");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Bank>("City.CreditCardBank", "Bank", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="City", Name="Currency")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Currency : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Currency object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="code">Initial value of the Code property.</param>
        public static Currency CreateCurrency(global::System.Int32 id, global::System.String code)
        {
            Currency currency = new Currency();
            currency.Id = id;
            currency.Code = code;
            return currency;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Code
        {
            get
            {
                return _Code;
            }
            set
            {
                OnCodeChanging(value);
                ReportPropertyChanging("Code");
                _Code = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Code");
                OnCodeChanged();
            }
        }
        private global::System.String _Code;
        partial void OnCodeChanging(global::System.String value);
        partial void OnCodeChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="City", Name="Demand")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Demand : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Demand object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="fulfilled">Initial value of the Fulfilled property.</param>
        /// <param name="dateTime">Initial value of the DateTime property.</param>
        public static Demand CreateDemand(global::System.Int32 id, global::System.Boolean fulfilled, global::System.DateTime dateTime)
        {
            Demand demand = new Demand();
            demand.Id = id;
            demand.Fulfilled = fulfilled;
            demand.DateTime = dateTime;
            return demand;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Fulfilled
        {
            get
            {
                return _Fulfilled;
            }
            set
            {
                OnFulfilledChanging(value);
                ReportPropertyChanging("Fulfilled");
                _Fulfilled = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Fulfilled");
                OnFulfilledChanged();
            }
        }
        private global::System.Boolean _Fulfilled;
        partial void OnFulfilledChanging(global::System.Boolean value);
        partial void OnFulfilledChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateTime
        {
            get
            {
                return _DateTime;
            }
            set
            {
                OnDateTimeChanging(value);
                ReportPropertyChanging("DateTime");
                _DateTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateTime");
                OnDateTimeChanged();
            }
        }
        private global::System.DateTime _DateTime;
        partial void OnDateTimeChanging(global::System.DateTime value);
        partial void OnDateTimeChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("City", "PersonDemand", "Person")]
        public Person Person
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Person>("City.PersonDemand", "Person").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Person>("City.PersonDemand", "Person").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Person> PersonReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Person>("City.PersonDemand", "Person");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Person>("City.PersonDemand", "Person", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("City", "DemandPoiType", "PoiType")]
        public PoiType PoiType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PoiType>("City.DemandPoiType", "PoiType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PoiType>("City.DemandPoiType", "PoiType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<PoiType> PoiTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PoiType>("City.DemandPoiType", "PoiType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<PoiType>("City.DemandPoiType", "PoiType", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("City", "TransactionDemand", "Transaction")]
        public Transaction Transaction
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Transaction>("City.TransactionDemand", "Transaction").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Transaction>("City.TransactionDemand", "Transaction").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Transaction> TransactionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Transaction>("City.TransactionDemand", "Transaction");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Transaction>("City.TransactionDemand", "Transaction", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="City", Name="District")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class District : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new District object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        public static District CreateDistrict(global::System.Int32 id)
        {
            District district = new District();
            district.Id = id;
            return district;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Population
        {
            get
            {
                return _Population;
            }
            set
            {
                OnPopulationChanging(value);
                ReportPropertyChanging("Population");
                _Population = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Population");
                OnPopulationChanged();
            }
        }
        private global::System.Int32 _Population = 0;
        partial void OnPopulationChanging(global::System.Int32 value);
        partial void OnPopulationChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("City", "DistrictAddress", "Address")]
        public EntityCollection<Address> Addresses
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Address>("City.DistrictAddress", "Address");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Address>("City.DistrictAddress", "Address", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("City", "ConfigurationDistrict", "Configuration")]
        public Configuration Configuration
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Configuration>("City.ConfigurationDistrict", "Configuration").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Configuration>("City.ConfigurationDistrict", "Configuration").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Configuration> ConfigurationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Configuration>("City.ConfigurationDistrict", "Configuration");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Configuration>("City.ConfigurationDistrict", "Configuration", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("City", "DistrictMapPoint", "MapPoint")]
        public EntityCollection<MapPoint> MapPoints
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<MapPoint>("City.DistrictMapPoint", "MapPoint");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<MapPoint>("City.DistrictMapPoint", "MapPoint", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="City", Name="MapPoint")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class MapPoint : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new MapPoint object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="lat">Initial value of the Lat property.</param>
        /// <param name="lng">Initial value of the Lng property.</param>
        public static MapPoint CreateMapPoint(global::System.Int32 id, global::System.Double lat, global::System.Double lng)
        {
            MapPoint mapPoint = new MapPoint();
            mapPoint.Id = id;
            mapPoint.Lat = lat;
            mapPoint.Lng = lng;
            return mapPoint;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Lat
        {
            get
            {
                return _Lat;
            }
            set
            {
                OnLatChanging(value);
                ReportPropertyChanging("Lat");
                _Lat = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Lat");
                OnLatChanged();
            }
        }
        private global::System.Double _Lat;
        partial void OnLatChanging(global::System.Double value);
        partial void OnLatChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Lng
        {
            get
            {
                return _Lng;
            }
            set
            {
                OnLngChanging(value);
                ReportPropertyChanging("Lng");
                _Lng = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Lng");
                OnLngChanged();
            }
        }
        private global::System.Double _Lng;
        partial void OnLngChanging(global::System.Double value);
        partial void OnLngChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="City", Name="Person")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Person : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Person object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        public static Person CreatePerson(global::System.Int32 id)
        {
            Person person = new Person();
            person.Id = id;
            return person;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("City", "CreditCardPerson", "CreditCard")]
        public CreditCard CreditCard
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CreditCard>("City.CreditCardPerson", "CreditCard").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CreditCard>("City.CreditCardPerson", "CreditCard").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CreditCard> CreditCardReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CreditCard>("City.CreditCardPerson", "CreditCard");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CreditCard>("City.CreditCardPerson", "CreditCard", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("City", "PersonDemand", "Demand")]
        public EntityCollection<Demand> Demands
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Demand>("City.PersonDemand", "Demand");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Demand>("City.PersonDemand", "Demand", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("City", "AddressPerson", "Address")]
        public Address Address
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Address>("City.AddressPerson", "Address").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Address>("City.AddressPerson", "Address").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Address> AddressReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Address>("City.AddressPerson", "Address");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Address>("City.AddressPerson", "Address", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("City", "PersonPersonTemplate", "PersonTemplate")]
        public PersonTemplate Template
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PersonTemplate>("City.PersonPersonTemplate", "PersonTemplate").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PersonTemplate>("City.PersonPersonTemplate", "PersonTemplate").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<PersonTemplate> TemplateReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PersonTemplate>("City.PersonPersonTemplate", "PersonTemplate");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<PersonTemplate>("City.PersonPersonTemplate", "PersonTemplate", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="City", Name="PersonTemplate")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PersonTemplate : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new PersonTemplate object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="firstName">Initial value of the FirstName property.</param>
        /// <param name="lastName">Initial value of the LastName property.</param>
        /// <param name="isMale">Initial value of the IsMale property.</param>
        public static PersonTemplate CreatePersonTemplate(global::System.Int32 id, global::System.String firstName, global::System.String lastName, global::System.Boolean isMale)
        {
            PersonTemplate personTemplate = new PersonTemplate();
            personTemplate.Id = id;
            personTemplate.FirstName = firstName;
            personTemplate.LastName = lastName;
            personTemplate.IsMale = isMale;
            return personTemplate;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FirstName
        {
            get
            {
                return _FirstName;
            }
            set
            {
                OnFirstNameChanging(value);
                ReportPropertyChanging("FirstName");
                _FirstName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FirstName");
                OnFirstNameChanged();
            }
        }
        private global::System.String _FirstName;
        partial void OnFirstNameChanging(global::System.String value);
        partial void OnFirstNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LastName
        {
            get
            {
                return _LastName;
            }
            set
            {
                OnLastNameChanging(value);
                ReportPropertyChanging("LastName");
                _LastName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LastName");
                OnLastNameChanged();
            }
        }
        private global::System.String _LastName;
        partial void OnLastNameChanging(global::System.String value);
        partial void OnLastNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsMale
        {
            get
            {
                return _IsMale;
            }
            set
            {
                OnIsMaleChanging(value);
                ReportPropertyChanging("IsMale");
                _IsMale = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsMale");
                OnIsMaleChanged();
            }
        }
        private global::System.Boolean _IsMale;
        partial void OnIsMaleChanging(global::System.Boolean value);
        partial void OnIsMaleChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="City", Name="Poi")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Poi : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Poi object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="vicinity">Initial value of the Vicinity property.</param>
        public static Poi CreatePoi(global::System.Int32 id, global::System.String name, global::System.String vicinity)
        {
            Poi poi = new Poi();
            poi.Id = id;
            poi.Name = name;
            poi.Vicinity = vicinity;
            return poi;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Vicinity
        {
            get
            {
                return _Vicinity;
            }
            set
            {
                OnVicinityChanging(value);
                ReportPropertyChanging("Vicinity");
                _Vicinity = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Vicinity");
                OnVicinityChanged();
            }
        }
        private global::System.String _Vicinity;
        partial void OnVicinityChanging(global::System.String value);
        partial void OnVicinityChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("City", "PoiTransaction", "Transaction")]
        public EntityCollection<Transaction> Transactions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Transaction>("City.PoiTransaction", "Transaction");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Transaction>("City.PoiTransaction", "Transaction", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("City", "PoiPoiType", "PoiType")]
        public EntityCollection<PoiType> Type
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PoiType>("City.PoiPoiType", "PoiType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PoiType>("City.PoiPoiType", "PoiType", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("City", "PoiMapPoint", "MapPoint")]
        public MapPoint MapPoint
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MapPoint>("City.PoiMapPoint", "MapPoint").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MapPoint>("City.PoiMapPoint", "MapPoint").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<MapPoint> MapPointReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MapPoint>("City.PoiMapPoint", "MapPoint");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<MapPoint>("City.PoiMapPoint", "MapPoint", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("City", "ConfigurationPois", "Configuration")]
        public Configuration Configuration
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Configuration>("City.ConfigurationPois", "Configuration").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Configuration>("City.ConfigurationPois", "Configuration").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Configuration> ConfigurationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Configuration>("City.ConfigurationPois", "Configuration");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Configuration>("City.ConfigurationPois", "Configuration", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="City", Name="PoiType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PoiType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new PoiType object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="code">Initial value of the Code property.</param>
        public static PoiType CreatePoiType(global::System.Int32 id, global::System.String code)
        {
            PoiType poiType = new PoiType();
            poiType.Id = id;
            poiType.Code = code;
            return poiType;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Code
        {
            get
            {
                return _Code;
            }
            set
            {
                OnCodeChanging(value);
                ReportPropertyChanging("Code");
                _Code = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Code");
                OnCodeChanged();
            }
        }
        private global::System.String _Code;
        partial void OnCodeChanging(global::System.String value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Frequency
        {
            get
            {
                return _Frequency;
            }
            set
            {
                OnFrequencyChanging(value);
                ReportPropertyChanging("Frequency");
                _Frequency = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Frequency");
                OnFrequencyChanged();
            }
        }
        private global::System.Double _Frequency = 1D;
        partial void OnFrequencyChanging(global::System.Double value);
        partial void OnFrequencyChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="City", Name="SelectionMethod")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SelectionMethod : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new SelectionMethod object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static SelectionMethod CreateSelectionMethod(global::System.Int32 id, global::System.String name)
        {
            SelectionMethod selectionMethod = new SelectionMethod();
            selectionMethod.Id = id;
            selectionMethod.Name = name;
            return selectionMethod;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="City", Name="Transaction")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Transaction : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Transaction object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="dateTime">Initial value of the DateTime property.</param>
        /// <param name="value">Initial value of the Value property.</param>
        public static Transaction CreateTransaction(global::System.Int32 id, global::System.DateTime dateTime, global::System.Double value)
        {
            Transaction transaction = new Transaction();
            transaction.Id = id;
            transaction.DateTime = dateTime;
            transaction.Value = value;
            return transaction;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateTime
        {
            get
            {
                return _DateTime;
            }
            set
            {
                OnDateTimeChanging(value);
                ReportPropertyChanging("DateTime");
                _DateTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateTime");
                OnDateTimeChanged();
            }
        }
        private global::System.DateTime _DateTime;
        partial void OnDateTimeChanging(global::System.DateTime value);
        partial void OnDateTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private global::System.Double _Value;
        partial void OnValueChanging(global::System.Double value);
        partial void OnValueChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("City", "CreditCardTransactions", "CreditCard")]
        public CreditCard CreditCard
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CreditCard>("City.CreditCardTransactions", "CreditCard").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CreditCard>("City.CreditCardTransactions", "CreditCard").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CreditCard> CreditCardReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CreditCard>("City.CreditCardTransactions", "CreditCard");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CreditCard>("City.CreditCardTransactions", "CreditCard", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("City", "PoiTransaction", "Poi")]
        public Poi Poi
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Poi>("City.PoiTransaction", "Poi").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Poi>("City.PoiTransaction", "Poi").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Poi> PoiReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Poi>("City.PoiTransaction", "Poi");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Poi>("City.PoiTransaction", "Poi", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("City", "TransactionDemand", "Demand")]
        public Demand Demand
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Demand>("City.TransactionDemand", "Demand").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Demand>("City.TransactionDemand", "Demand").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Demand> DemandReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Demand>("City.TransactionDemand", "Demand");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Demand>("City.TransactionDemand", "Demand", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
